<? xml version="1.0" encoding="UTF-8"?>
<!-- Puede editar libremente este archivo. Consulte los bloques comentados a continuación para -->
<!-- algunos ejemplos de cómo personalizar la compilación. -->
<!-- (Si lo elimina y vuelve a abrir el proyecto, se volverá a crear). -->
<!-- De forma predeterminada, solo los comandos Limpiar y Generar utilizan este script de compilación. -->
<!-- Los comandos como Ejecutar, Depurar y Probar solo usan este script de compilación si -->
<!-- la función Compilar al guardar está desactivada para el proyecto. -->
<!-- Puede desactivar la opción Compilar al guardar (o Implementar al guardar) -->
<!-- en el cuadro de diálogo Propiedades del proyecto del proyecto. -->
<nombre del proyecto="GA7-220501096-AA2-EV01_codificación_de_módulos_del_software_según__requerimientos_del_proyecto" default="default" basedir=".">
    <description>Compila, prueba y ejecuta el proyecto GA7-220501096-AA2-EV01 codificación de módulos del software según requerimientos del proyecto.</description>
    <import file="nbproject/build-impl.xml"/>
    <!--
 Existen varios objetivos que están vacíos por defecto y que pueden ser 
 se utiliza para la ejecución de sus tareas. Por lo general, estos objetivos se ejecutan 
 antes y después de algunos objetivos principales. Son los siguientes: 
 -pre-init: se llama antes de la inicialización de las propiedades del proyecto
 -post-init: se llama después de la inicialización de las propiedades del proyecto
 -pre-compile: llamado antes de la compilación javac
 -post-compile: llamado después de la compilación javac
 -pre-compile-single: llamado antes de la compilación javac de un solo archivo
 -post-compile-single: llamado después de la compilación javac de un solo archivo
 -pre-compile-test: se llama antes de la compilación javac de las pruebas JUnit
 -post-compile-test: llamado después de la compilación javac de las pruebas JUnit
 -pre-compile-test-single: se llama antes de la compilación javac de una sola prueba JUnit
 -post-compile-test-single: llamado después de la compilación javac de una sola prueba de JUunit
 -pre-jar: llamado antes de la construcción de JAR
 -post-jar: llamado después de la construcción de JAR
 -post-limpieza: llamado después de limpiar los productos de construcción
 (Los objetivos que comienzan con '-' no están pensados para ser llamados por sí solos).
 Un ejemplo de inserción de un ofuscador después de la compilación podría ser el siguiente:
 <nombre de destino="-post-compile">
 <ofuscar>
                <fileset dir="${build.classes.dir}"/>
 </ofuscar>
 </objetivo>
 Para obtener una lista de las propiedades disponibles, consulte el archivo 
 nbproject/build-impl.xml archivo. 
 Otra forma de personalizar la compilación es invalidando los destinos principales existentes.
 Los objetivos de interés son: 
 -init-macrodef-javac: define la macro para la compilación de javac
 -init-macrodef-junit: define la macro para la ejecución de junit
 -init-macrodef-debug: define la macro para la depuración de clases
 -init-macrodef-java: define la macro para la ejecución de clases
 -do-jar: Edificio JAR
 EJECUTAR: ejecución del proyecto 
 -javadoc-build: Generación de Javadoc
 test-report: Generación de informes JUnit
 Un ejemplo de anulación del destino para la ejecución del proyecto podría ser el siguiente:
        <target name="run" depends="GA7-220501096-AA2-EV01_codificación_de_módulos_del_software_según__requerimientos_del_proyecto-impl.jar">
 <exec dir="bin" ejecutable="launcher.exe">
 <arg archivo="${dist.jar}"/>
 </ejecutivo>
 </objetivo>
 Tenga en cuenta que el destino anulado depende del destino jar y no solo de 
 el destino de compilación como lo hace el destino de ejecución normal. De nuevo, para obtener una lista de los 
 que puede utilizar, compruebe el destino que está anulando en el archivo
 nbproject/build-impl.xml archivo. 
    -->
</proyecto>
